{
  "Svelte Component": {
		"prefix": "kitComp",
    	"scope": "svelte, markdown",
		"description": "Scaffold a Svelte component",
		"body": [
			"<script>",
			"$0",
			"</script>",
			"",
			"<style>",
			"",
			"</style>"
		]		
	},
	"Svelte TypeScript Component": {
		"prefix": "kitCompTs",
    	"scope": "svelte, markdown",
		"description": "Scaffold a TypeScript Svelte component",
		"body": [
			"<script lang=ts>",
			"\t $0",
			"</script>",
			"",
			"<style>",
			"",
			"</style>"
		]		
	},
	"SvelteKit Module Component": {
		"prefix": "kitModule",
    	"scope": "svelte, markdown",
		"description": "Scaffold a SvelteKit module component for a page",
		"body": [
			"<script context=module>",
			"\t $0",
			"</script>",
			"<script>",
			"",
			"</script>",
			"",
			"<style>",
			"",
			"</style>"
		]
	},
	"SvelteKit TypeScript Module Component": {
		"prefix": "kitModuleTs",
    	"scope": "svelte, markdown",
		"description": "Scaffold a SvelteKit module component for a page",
		"body": [
			"<script lang=ts context=module>",
			"\t $0",
			"</script>",
			"<script lang=ts>",
			"",
			"</script>",
			"",
			"<style>",
			"",
			"</style>"
		]
	},
	"SvelteKit Layout Component": {
		"prefix": "kitLayout",
    	"scope": "svelte, markdown",
		"description": "Scaffold a SvelteKit layout component",
		"body": [
			"<script>",
			"\t $0",
			"</script>",
			"",
			"<main>",
			"  <slot/>",
			"</main>",
			"",
			"<style>",
			"",
			"</style>"
		]
	},
	"Svelte Prefetch": {
		"prefix": "kitPrefetch",
    	"scope": "svelte, html, markdown",
		"description": "Create sveltekit:prefetch anchor tag",
		"body": ["<a sveltekit:prefetch href='${1:url}'>${2:text}</a>"]
	},
	"Svelte Each Block": {
		"prefix": "kitEach",
    	"scope": "svelte",
		"description": "Create a Svelte #each block",
		"body": [
			"{#each ${1:array} as ${2:element} }",
			"\t",
			"{/each}"
		]
	},
	"Svelte If Block": {
		"prefix": "kitIf",
    	"scope": "svelte, markdown",
		"description": "Create a Svelte #if block",
		"body": [
			"{#if ${1:condition} }",
			"\t",
			"{/if}"
		]
	},
	"Svelte Await Block": {
		"prefix": "kitAwait",
    	"scope": "svelte, markdown",
		"description": "Create a Svelte #await block",
		"body": [
			"{#await ${1:expression} }",
			"\t",
			"{:then ${2:name} }",
			"\t",
			"{:catch ${3:name} }",
			"\t",
			"{/await}"
		]
	},
	"Svelte Key Block": {
		"prefix": "kitKey",
    	"scope": "svelte, markdown",
		"description": "Create a Svelte #key block",
		"body": [
			"{#key ${1:expression} }",
			"\t",
			"{/key}"
		]
	},
	"Svelte Page Title": {
		"prefix": "kitTitle",
    	"scope": "svelte, markdown",
		"description": "Create a title element in the document head",
		"body": [
			"<svelte:head>",
			"\t<title>${TM_FILENAME_BASE}</title>",
			"</svelte:head>"
		]
	},
  "SvelteKit Load Function": {
		"prefix": "kitLoad",
    	"scope": "svelte, javascript, markdown",
		"description": "Create a SvelteKit Load function",
		"body": [
		"/** @type {import('@sveltejs/kit').Load} */",
		"export const load = async ({ url, params, props, fetch, session, stuff, status, error }) => {",
		"  const resourceUrl = `${1:api}`;",
		"  const res = await fetch(resourceUrl);",
		"",
		"  if (res.ok) {",
		"    return {",
		"      status: res.status,",
		"      props: {",
		"         ${2:propName}: await res.json()",
		"      }",
		"    };",
		"  }",
		"",
		"  return {",
		"    status: res.status,",
		"    error: new Error(`Could not load ${url}`)",
		"  };",
		"}"
		]
	},
	"SvelteKit TypeScript Load Function": {
		"prefix": "kitLoadTs",
    	"scope": "svelte, javascript, markdown",
		"description": "Create a SvelteKit TypeScript Load function",
		"body": [
		"import type { Load } from '@sveltejs/kit';",
		"",
		"/** @type {import('@sveltejs/kit').Load} */",
		"export const load: Load = async ({ url, params, props, fetch, session, stuff, status, error }) => {",
		"  const resourceUrl = `${1:api}`;",
		"  const res = await fetch(resourceUrl);",
		"",
		"  if (res.ok) {",
		"    return {",
		"      status: res.status,",
		"      props: {",
		"         ${2:propName}: await res.json()",
		"      }",
		"    };",
		"  }",
		"",
		"  return {",
		"    status: res.status,",
		"    error: new Error(`Could not load ${url}`)",
		"  };",
		"}"
		]
	},
	"SvelteKit Endpoint": {
		"prefix": "kitEndpoint",
    	"scope": "javascript, markdown",
		"description": "Create a SvelteKit Endpoint",
		"body": [
		"/** @type {import('@sveltejs/kit').RequestHandler} */",
		"export const ${1|get,post,put,patch,del|} = async ({ clientAddress, locals, params, platform, request, routeId, url }) => {",
		"  const res = await ${2:something};",
		"",
		"  if (res) {",
		"    return {",
		"      body: {",
		"        res",
		"      }",
		"    };",
		"  }",
		"}"
		]
	},
	"SvelteKit TypeScript Endpoint": {
		"prefix": "kitTsEndpoint",
    	"scope": "typescript, markdown",
		"description": "Create a SvelteKit Typescript Endpoint",
		"body": [
		"import type { RequestHandler } from '@sveltejs/kit';",
		"",
		"/** @type {import('@sveltejs/kit').RequestHandler} */",
		"export const ${1|get,post,put,patch,del|}: RequestHandler = async ({ clientAddress, locals, params, platform, request, routeId, url }):Promise<{ body: { [key: string]: ${2: returnType} } }> => {",
		"  const res:${2: returnType} = await ${3:something};",
		"",
		"  if (res) {",
		"    return {",
		"      body: {",
		"        res",
		"      }",
		"    };",
		"  }",
		"}"
		]
	},
}